<Activity mc:Ignorable="sap sap2010" x:Class="DailyProcessSequence" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data" xmlns:this="clr-namespace:" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_Config1" Type="InArgument(scg:Dictionary(x:String, x:Object))" />
    <x:Property Name="io_TransactionNumber1" Type="InOutArgument(x:Int32)" />
    <x:Property Name="in_TransactionItem1" Type="InArgument(sd:DataRow)" />
    <x:Property Name="out_TotalStdWorkingHours" Type="OutArgument(x:Double)" />
    <x:Property Name="out_TotalPremWorkingHours" Type="OutArgument(x:Double)" />
    <x:Property Name="in_QuotationFilePath1" Type="InArgument(x:String)" />
    <x:Property Name="in_SundaysDT" Type="InArgument(sd:DataTable)" />
    <x:Property Name="in_PublicHolidaysDT" Type="InArgument(sd:DataTable)" />
    <x:Property Name="out_TotalOTHours" Type="OutArgument(x:Double)" />
    <x:Property Name="in_MinWorkingHrs" Type="InArgument(x:Double)" />
  </x:Members>
  <this:DailyProcessSequence.in_SundaysDT>
    <InArgument x:TypeArguments="sd:DataTable" />
  </this:DailyProcessSequence.in_SundaysDT>
  <this:DailyProcessSequence.in_PublicHolidaysDT>
    <InArgument x:TypeArguments="sd:DataTable" />
  </this:DailyProcessSequence.in_PublicHolidaysDT>
  <this:DailyProcessSequence.in_MinWorkingHrs>
    <InArgument x:TypeArguments="x:Double" />
  </this:DailyProcessSequence.in_MinWorkingHrs>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1116.8,9760</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>DailyProcessSequence_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="44">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
      <x:String>UiPath.UIAutomationNext.Enums</x:String>
      <x:String>UiPath.UIAutomationCore.Contracts</x:String>
      <x:String>UiPath.Excel</x:String>
      <x:String>UiPath.UIAutomationNext.Contracts</x:String>
      <x:String>UiPath.UIAutomationNext.Activities.Models</x:String>
      <x:String>UiPath.Excel.Model</x:String>
      <x:String>UiPath.Platform.ResourceHandling</x:String>
      <x:String>System.Security</x:String>
      <x:String>System.Activities.DynamicUpdate</x:String>
      <x:String>UiPath.UIAutomationNext.Activities</x:String>
      <x:String>UiPath.Platform.ObjectLibrary</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>UiPath.Excel.Activities.Business</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>UiPath.DataTableUtilities</x:String>
      <x:String>UiPath.Excel.Activities</x:String>
      <x:String>System.Globalization</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="72">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationNext</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationNext.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Platform</AssemblyReference>
      <AssemblyReference>UiPath.Mail.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Testing.Activities</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities</AssemblyReference>
      <AssemblyReference>System.Data.Entity</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>Microsoft.Bcl.AsyncInterfaces</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Runtime.WindowsRuntime</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="CAlculate the number of hours worked on weekday and detect if driver has worked on Sundays or public holidays" DisplayName="Monthly Calculations main sequence" sap:VirtualizedContainerService.HintSize="1127.2,9695.2" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Name="CompanyName" />
      <Variable x:TypeArguments="x:Boolean" Name="DOPDFDownloadSuccess" />
      <Variable x:TypeArguments="x:String" Name="JobSiteAddress" />
      <Variable x:TypeArguments="x:String" Name="DONumber" />
      <Variable x:TypeArguments="s:DateTime" Name="EndTime2" />
      <Variable x:TypeArguments="s:DateTime" Name="StartTime2" />
      <Variable x:TypeArguments="s:DateTime" Name="EndTime1" />
      <Variable x:TypeArguments="s:DateTime" Name="StartTime1" />
      <Variable x:TypeArguments="x:Boolean" Name="SignatureFlag" />
      <Variable x:TypeArguments="x:String" Name="ItemGroup" />
      <Variable x:TypeArguments="x:String" Name="ItemType" />
      <Variable x:TypeArguments="x:String" Name="ItemSerial" />
      <Variable x:TypeArguments="x:String" Name="JobType" />
      <Variable x:TypeArguments="x:String" Name="DOFilename" />
      <Variable x:TypeArguments="x:String" Name="CurrentDOFilePath" />
      <Variable x:TypeArguments="x:Boolean" Name="FileDownloaded" />
      <Variable x:TypeArguments="x:Int32" Default="1" Name="in_TransactionNumber" />
      <Variable x:TypeArguments="sd:DataTable" Name="Dt" />
      <Variable x:TypeArguments="x:Boolean" Name="SignaurePresent" />
      <Variable x:TypeArguments="x:Int32" Name="TimeDiffHours1" />
      <Variable x:TypeArguments="x:Int32" Name="TimeDiffHours2" />
      <Variable x:TypeArguments="x:String" Name="JobTypeCell" />
      <Variable x:TypeArguments="sd:DataTable" Name="QuotationDT" />
      <Variable x:TypeArguments="x:Int32" Name="RowIndex" />
      <Variable x:TypeArguments="x:String" Name="MinHoursLine" />
      <Variable x:TypeArguments="x:String" Name="StartDate1" />
      <Variable x:TypeArguments="x:String" Name="StartDate2" />
      <Variable x:TypeArguments="x:String" Name="EndDate1" />
      <Variable x:TypeArguments="x:String" Name="PublicHolidayStartDate" />
      <Variable x:TypeArguments="s:DateTime" Name="PHEndDateTime" />
      <Variable x:TypeArguments="s:DateTime" Name="PHStartDateTime" />
      <Variable x:TypeArguments="x:String" Name="PHDate" />
      <Variable x:TypeArguments="s:DateTime" Name="GetHolidayDate" />
      <Variable x:TypeArguments="x:String" Name="QuotationRefNumber" />
      <Variable x:TypeArguments="x:String" Name="CompanyNameQF" />
      <Variable x:TypeArguments="sd:DataTable" Name="InputDT" />
      <Variable x:TypeArguments="x:String" Name="EndJobDate2" />
      <Variable x:TypeArguments="x:String" Name="PremOTTimeStartStr" />
      <Variable x:TypeArguments="x:String" Name="PremiumOTTime" />
      <Variable x:TypeArguments="x:String" Name="PremOTTimeEndStr" />
      <Variable x:TypeArguments="x:Int32" Name="HoursIndex" />
      <Variable x:TypeArguments="x:String" Name="StandardOTTime" />
      <Variable x:TypeArguments="s:DateTime" Name="StdOTStartDateTime" />
      <Variable x:TypeArguments="s:DateTime" Name="StdOTEndDateTime" />
      <Variable x:TypeArguments="x:String" Name="StdOTTimeStartStr" />
      <Variable x:TypeArguments="x:String" Name="StdOTTimeEndStr" />
      <Variable x:TypeArguments="s:DateTime" Name="PremOTStartDateTime" />
      <Variable x:TypeArguments="s:DateTime" Name="PremOTEndDateTime" />
      <Variable x:TypeArguments="x:String" Name="EndDay" />
      <Variable x:TypeArguments="x:String" Name="StartDay" />
      <Variable x:TypeArguments="x:Double" Name="StdWorkingHours1" />
      <Variable x:TypeArguments="x:Double" Name="PremWorkingHours1" />
      <Variable x:TypeArguments="x:Double" Name="StdWorkingHours2" />
      <Variable x:TypeArguments="x:Double" Name="PremWorkingHours2" />
      <Variable x:TypeArguments="sd:DataTable" Name="TimeSheetDT" />
      <Variable x:TypeArguments="x:Double" Name="OTHoursForDay" />
      <Variable x:TypeArguments="x:Double" Name="PremWorkingHoursForDay" />
      <Variable x:TypeArguments="x:Double" Name="StdWorkingHoursForDay" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        <x:Boolean x:Key="IsPinned">False</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:LogMessage DisplayName="Log Message - fetching Start time 1 and end time 1" sap:VirtualizedContainerService.HintSize="1085.6,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_64" Level="Info" Message="[&quot;Fetching Start Times and End Times&quot;]" />
    <ui:ExcelApplicationScope Password="{x:Null}" DisplayName="Excel Application Scope" sap:VirtualizedContainerService.HintSize="1085.6,709.6" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_1" InstanceCachePeriod="3000" WorkbookPath="[in_TransactionItem1(&quot;Monthly Excel File Path&quot;).ToString]">
      <ui:ExcelApplicationScope.Body>
        <ActivityAction x:TypeArguments="ui:WorkbookApplication">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
          </ActivityAction.Argument>
          <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="794.4,600" sap2010:WorkflowViewState.IdRef="Sequence_136">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:ExcelReadRange AddHeaders="True" DataTable="[TimeSheetDT]" DisplayName="Read Range - Timesheet" sap:VirtualizedContainerService.HintSize="752.8,60" sap2010:WorkflowViewState.IdRef="ExcelReadRange_1" SheetName="Sheet1">
              <ui:ExcelReadRange.Range>
                <InArgument x:TypeArguments="x:String">
                  <Literal x:TypeArguments="x:String" Value="" />
                </InArgument>
              </ui:ExcelReadRange.Range>
            </ui:ExcelReadRange>
            <If Condition="[TimeSheetDT.Rows.Count&gt;0]" sap:VirtualizedContainerService.HintSize="752.8,407.2" sap2010:WorkflowViewState.IdRef="If_32">
              <If.Then>
                <ui:LogMessage DisplayName="Log Message - log mo. of entries in timesheet" sap:VirtualizedContainerService.HintSize="333.6,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_72" Level="Info" Message="[&quot;There are &quot;+ TimeSheetDT.Rows.Count.ToString+&quot; number of entries in TimeSheet file to calculate the total hours.&quot;]" />
              </If.Then>
              <If.Else>
                <Sequence DisplayName="Throw exception" sap:VirtualizedContainerService.HintSize="375.2,248" sap2010:WorkflowViewState.IdRef="Sequence_144">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:LogMessage DisplayName="Log Message - log no entries present in timesheet" sap:VirtualizedContainerService.HintSize="333.6,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_73" Level="Info" Message="[&quot;There are &quot;+ TimeSheetDT.Rows.Count.ToString+&quot; number of entries in TimeSheet file to calculate the total hours. Please check it manually.&quot;]" />
                  <Throw DisplayName="Throw no entries present in timesheet file" Exception="[new BusinessRuleException(&quot;There are no entries in the Time Sheet file for PO Number: &quot;+ in_TransactionItem1(&quot;PO Number&quot;).ToString+&quot; Please check it manually if they are present on Portal.&quot;)]" sap:VirtualizedContainerService.HintSize="333.6,22.4" sap2010:WorkflowViewState.IdRef="Throw_1" />
                </Sequence>
              </If.Else>
            </If>
          </Sequence>
        </ActivityAction>
      </ui:ExcelApplicationScope.Body>
    </ui:ExcelApplicationScope>
    <Assign DisplayName="Assign std working hrs 0" sap:VirtualizedContainerService.HintSize="1085.6,60" sap2010:WorkflowViewState.IdRef="Assign_97">
      <Assign.To>
        <OutArgument x:TypeArguments="x:Double">[out_TotalStdWorkingHours]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:Double">0</InArgument>
      </Assign.Value>
    </Assign>
    <Assign DisplayName="Assign prem working hrs 0" sap:VirtualizedContainerService.HintSize="1085.6,60" sap2010:WorkflowViewState.IdRef="Assign_98">
      <Assign.To>
        <OutArgument x:TypeArguments="x:Double">[out_TotalPremWorkingHours]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:Double">0</InArgument>
      </Assign.Value>
    </Assign>
    <Assign DisplayName="Assign OT working hrs 0" sap:VirtualizedContainerService.HintSize="1085.6,60" sap2010:WorkflowViewState.IdRef="Assign_105">
      <Assign.To>
        <OutArgument x:TypeArguments="x:Double">[out_TotalOTHours]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:Double">0</InArgument>
      </Assign.Value>
    </Assign>
    <ui:ForEachRow ColumnNames="{x:Null}" CurrentIndex="{x:Null}" DataTable="[TimeSheetDT]" DisplayName="For Each Row in Data Table" sap:VirtualizedContainerService.HintSize="1085.6,8388.8" sap2010:WorkflowViewState.IdRef="ForEachRow_6">
      <ui:ForEachRow.Body>
        <ActivityAction x:TypeArguments="sd:DataRow">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="sd:DataRow" Name="CurrentRow" />
          </ActivityAction.Argument>
          <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="1052,8272.8" sap2010:WorkflowViewState.IdRef="Sequence_137">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <Assign DisplayName="Assign std working hrs 1 to 0" sap:VirtualizedContainerService.HintSize="1010.4,60" sap2010:WorkflowViewState.IdRef="Assign_107">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Double">[StdWorkingHours1]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Double">0</InArgument>
              </Assign.Value>
            </Assign>
            <Assign DisplayName="Assign std working hrs 2 to 0" sap:VirtualizedContainerService.HintSize="1010.4,60" sap2010:WorkflowViewState.IdRef="Assign_108">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Double">[StdWorkingHours2]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Double">0</InArgument>
              </Assign.Value>
            </Assign>
            <Assign DisplayName="Assign prem working hrs 1 to 0" sap:VirtualizedContainerService.HintSize="1010.4,60" sap2010:WorkflowViewState.IdRef="Assign_109">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Double">[PremWorkingHours1]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Double">0</InArgument>
              </Assign.Value>
            </Assign>
            <Assign DisplayName="Assign prem working hrs 2 to 0" sap:VirtualizedContainerService.HintSize="1010.4,60" sap2010:WorkflowViewState.IdRef="Assign_110">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Double">[PremWorkingHours2]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Double">0</InArgument>
              </Assign.Value>
            </Assign>
            <Assign DisplayName="Assign OT working hrs 2 to 0" sap:VirtualizedContainerService.HintSize="1010.4,60" sap2010:WorkflowViewState.IdRef="Assign_112">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Double">[OTHoursForDay]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Double">0</InArgument>
              </Assign.Value>
            </Assign>
            <If Condition="[CurrentRow(&quot;Start Time 1&quot;).ToString.Contains(&quot;-&quot;) and CurrentRow(&quot;End Time 1&quot;).ToString.Contains(&quot;-&quot;)]" DisplayName="If - Start time 1 and End time 1 calculations" sap:VirtualizedContainerService.HintSize="1010.4,897.6" sap2010:WorkflowViewState.IdRef="If_4">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If.Then>
                <Sequence DisplayName="If times are not available" sap:VirtualizedContainerService.HintSize="375.2,485.6" sap2010:WorkflowViewState.IdRef="Sequence_29">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:LogMessage DisplayName="Log Message - Times not marked" sap:VirtualizedContainerService.HintSize="333.6,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_42" Level="Info" Message="[&quot;Start and End work time before lunch is not available&quot;]" />
                  <Assign DisplayName="Assign - Calulate time difference" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_5">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Int32">[TimeDiffHours1]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Int32">0</InArgument>
                    </Assign.Value>
                  </Assign>
                  <Assign DisplayName="Assign Start Job Date Before Lunch" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_6">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[StartDate1]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">Not Available</InArgument>
                    </Assign.Value>
                  </Assign>
                  <Assign DisplayName="Assign End Job Date Before Lunch" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_7">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[EndDate1]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">Not Available</InArgument>
                    </Assign.Value>
                  </Assign>
                </Sequence>
              </If.Then>
              <If.Else>
                <Sequence DisplayName="If times are marked" sap:VirtualizedContainerService.HintSize="304,738.4" sap2010:WorkflowViewState.IdRef="Sequence_34">
                  <Sequence.Variables>
                    <Variable x:TypeArguments="x:String" Name="StartHoursAfterLunch" />
                  </Sequence.Variables>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <Assign DisplayName="Assign Start Job Time Before Lunch" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_101">
                    <Assign.To>
                      <OutArgument x:TypeArguments="s:DateTime">[StartTime1]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="s:DateTime">[DateTime.ParseExact(CurrentRow("Start Time 1").ToString, "dd/MM/yyyy HH:mm",System.Globalization.CultureInfo.InvariantCulture)]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="262.4,52.8" sap2010:WorkflowViewState.IdRef="CommentOut_1">
                    <ui:CommentOut.Body>
                      <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="304,152.8" sap2010:WorkflowViewState.IdRef="Sequence_138">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <Assign DisplayName="Assign Start Job Time Before Lunch" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_1">
                          <Assign.To>
                            <OutArgument x:TypeArguments="s:DateTime">[StartTime1]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="s:DateTime">[DateTime.ParseExact( CurrentRow("Start Time 1").ToString, "dd/MM/yyyy HH:mm",System.Globalization.CultureInfo.InvariantCulture)]</InArgument>
                          </Assign.Value>
                        </Assign>
                      </Sequence>
                    </ui:CommentOut.Body>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:CommentOut>
                  <Assign DisplayName="Assign End Job Time Before Lunch" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_102">
                    <Assign.To>
                      <OutArgument x:TypeArguments="s:DateTime">[EndTime1]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="s:DateTime">[DateTime.ParseExact(CurrentRow("End Time 1").ToString, "dd/MM/yyyy HH:mm",System.Globalization.CultureInfo.InvariantCulture)]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="262.4,52.8" sap2010:WorkflowViewState.IdRef="CommentOut_4">
                    <ui:CommentOut.Body>
                      <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="304,152.8" sap2010:WorkflowViewState.IdRef="Sequence_141">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <Assign DisplayName="Assign End Job Time Before Lunch" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_2">
                          <Assign.To>
                            <OutArgument x:TypeArguments="s:DateTime">[EndTime1]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="s:DateTime">[DateTime.ParseExact( CurrentRow("End Time 1").ToString, "dd/MM/yyyy HH:mm",System.Globalization.CultureInfo.InvariantCulture)]</InArgument>
                          </Assign.Value>
                        </Assign>
                      </Sequence>
                    </ui:CommentOut.Body>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:CommentOut>
                  <Assign DisplayName="Assign Start Job Date Before Lunch" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_8">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[StartDate1]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[StartTime1.ToShortDateString]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <Assign DisplayName="Assign End Job Date Before Lunch" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_9">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[EndDate1]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[EndTime1.ToShortDateString]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <Assign DisplayName="Assign - Calulate time difference" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_10">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Int32">[TimeDiffHours1]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Int32">[(EndTime1-StartTime1).Hours]</InArgument>
                    </Assign.Value>
                  </Assign>
                </Sequence>
              </If.Else>
            </If>
            <If Condition="[CurrentRow(&quot;Start Time 2&quot;).ToString.Contains(&quot;-&quot;) and CurrentRow(&quot;End Time 2&quot;).ToString.Contains(&quot;-&quot;)]" DisplayName="If - Start time 2 and End time 2 calculations" sap:VirtualizedContainerService.HintSize="1010.4,897.6" sap2010:WorkflowViewState.IdRef="If_5">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If.Then>
                <Sequence DisplayName="If times are not available" sap:VirtualizedContainerService.HintSize="375.2,485.6" sap2010:WorkflowViewState.IdRef="Sequence_35">
                  <Sequence.Variables>
                    <Variable x:TypeArguments="x:String" Name="EndDate2" />
                  </Sequence.Variables>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:LogMessage DisplayName="Log Message - Times not marked" sap:VirtualizedContainerService.HintSize="333.6,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_43" Level="Info" Message="[&quot;Start and End work time after lunch is not available&quot;]" />
                  <Assign DisplayName="Assign - Calulate time difference" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_15">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Int32">[TimeDiffHours2]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Int32">0</InArgument>
                    </Assign.Value>
                  </Assign>
                  <Assign DisplayName="Assign Start Job Date Before Lunch" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_16">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[StartDate2]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">Not Available</InArgument>
                    </Assign.Value>
                  </Assign>
                  <Assign DisplayName="Assign End Job Date Before Lunch" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_17">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[EndDate2]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">Not Available</InArgument>
                    </Assign.Value>
                  </Assign>
                </Sequence>
              </If.Then>
              <If.Else>
                <Sequence DisplayName="If times are marked" sap:VirtualizedContainerService.HintSize="304,738.4" sap2010:WorkflowViewState.IdRef="Sequence_36">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <Assign sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_103">
                    <Assign.To>
                      <OutArgument x:TypeArguments="s:DateTime">[StartTime2]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="s:DateTime">[DateTime.ParseExact(CurrentRow("Start Time 2").ToString, "dd/MM/yyyy HH:mm",System.Globalization.CultureInfo.InvariantCulture)]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="262.4,52.8" sap2010:WorkflowViewState.IdRef="CommentOut_2">
                    <ui:CommentOut.Body>
                      <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="304,152.8" sap2010:WorkflowViewState.IdRef="Sequence_139">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <Assign DisplayName="Assign Start Job Time After Lunch" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_13">
                          <Assign.To>
                            <OutArgument x:TypeArguments="s:DateTime">[StartTime2]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="s:DateTime">[DateTime.ParseExact( CurrentRow("Start Time 2").ToString, "dd/MM/yyyy HH:mm",System.Globalization.CultureInfo.InvariantCulture)]</InArgument>
                          </Assign.Value>
                        </Assign>
                      </Sequence>
                    </ui:CommentOut.Body>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:CommentOut>
                  <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="262.4,52.8" sap2010:WorkflowViewState.IdRef="CommentOut_3">
                    <ui:CommentOut.Body>
                      <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="304,152.8" sap2010:WorkflowViewState.IdRef="Sequence_140">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <Assign DisplayName="Assign Start Job Time After Lunch" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_14">
                          <Assign.To>
                            <OutArgument x:TypeArguments="s:DateTime">[EndTime2]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="s:DateTime">[DateTime.ParseExact( CurrentRow("End Time 2").ToString, "dd/MM/yyyy HH:mm",System.Globalization.CultureInfo.InvariantCulture)]</InArgument>
                          </Assign.Value>
                        </Assign>
                      </Sequence>
                    </ui:CommentOut.Body>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:CommentOut>
                  <Assign sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_104">
                    <Assign.To>
                      <OutArgument x:TypeArguments="s:DateTime">[EndTime2]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="s:DateTime">[DateTime.ParseExact(CurrentRow("End Time 2").ToString, "dd/MM/yyyy HH:mm",System.Globalization.CultureInfo.InvariantCulture)]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <Assign DisplayName="Assign - Calulate time difference" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_18">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Int32">[TimeDiffHours2]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Int32" xml:space="preserve">[( EndTime2-  StartTime2).Hours]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <Assign DisplayName="Assign Start Job Date After Lunch" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_19">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[StartDate2]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[StartTime2.ToString.split(" "c)(0)]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <Assign DisplayName="Assign End Job Date After Lunch" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_20">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[EndJobDate2]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[EndTime2.ToString.split(" "c)(0)]</InArgument>
                    </Assign.Value>
                  </Assign>
                </Sequence>
              </If.Else>
            </If>
            <ui:LogMessage DisplayName="Log Message - Start Time 1" sap:VirtualizedContainerService.HintSize="1010.4,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_65" Level="Info" Message="[&quot;Start Time 1: &quot;+ StartTime1.ToString]" />
            <ui:LogMessage DisplayName="Log Message - End Time 1" sap:VirtualizedContainerService.HintSize="1010.4,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_66" Level="Info" Message="[&quot;End Time 1: &quot;+ EndTime1.ToString]" />
            <ui:LogMessage DisplayName="Log Message - Start Time 2" sap:VirtualizedContainerService.HintSize="1010.4,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_67" Level="Info" Message="[&quot;Start Time 2: &quot;+ StartTime2.ToString]" />
            <ui:LogMessage DisplayName="Log Message - End Time 2" sap:VirtualizedContainerService.HintSize="1010.4,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_68" Level="Info" Message="[&quot;End Time 2: &quot;+  EndTime2.ToString]" />
            <If Condition="[Not CurrentRow(&quot;Lunch Signature&quot;).ToString.Contains(&quot;Not Available&quot;)]" DisplayName="Signature present check" sap:VirtualizedContainerService.HintSize="1010.4,52.8" sap2010:WorkflowViewState.IdRef="If_6">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If.Then>
                <Sequence sap:VirtualizedContainerService.HintSize="375.2,285.6" sap2010:WorkflowViewState.IdRef="Sequence_38">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <Assign DisplayName="Assign Signature present to true" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_21">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Boolean">[SignaurePresent]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:LogMessage DisplayName="Log Message - Signature Present display true" sap:VirtualizedContainerService.HintSize="333.6,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_44" Level="Info" Message="[&quot;Signature Present: &quot;+ SignaurePresent.ToString]" />
                </Sequence>
              </If.Then>
              <If.Else>
                <Sequence sap:VirtualizedContainerService.HintSize="375.2,285.6" sap2010:WorkflowViewState.IdRef="Sequence_39">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <Assign DisplayName="Assign Signature present to false" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_22">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Boolean">[SignaurePresent]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:LogMessage DisplayName="Log Message - Signature Present display false" sap:VirtualizedContainerService.HintSize="333.6,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_45" Level="Info" Message="[&quot;Signature Present: &quot;+ SignaurePresent.ToString]" />
                </Sequence>
              </If.Else>
            </If>
            <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="1010.4,52.8" sap2010:WorkflowViewState.IdRef="CommentOut_5">
              <ui:CommentOut.Body>
                <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="416.8,378.4" sap2010:WorkflowViewState.IdRef="Sequence_147">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <Sequence DisplayName="Calculate total worked time and min working hours" sap:VirtualizedContainerService.HintSize="375.2,285.6" sap2010:WorkflowViewState.IdRef="Sequence_40">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <Assign DisplayName="Assign Total Working Hours" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_23">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Double">[StdWorkingHours1]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:Double">[TimeDiffHours1+TimeDiffHours2]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:LogMessage DisplayName="Log Message - Display total working hours" sap:VirtualizedContainerService.HintSize="333.6,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_46" Level="Info" Message="[&quot;Total working hours: &quot;+ StdWorkingHours1.ToString]" />
                  </Sequence>
                </Sequence>
              </ui:CommentOut.Body>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:CommentOut>
            <Sequence DisplayName="Check if the start day is weekday or PH" sap:VirtualizedContainerService.HintSize="1010.4,68.8" sap2010:WorkflowViewState.IdRef="Sequence_109">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <Assign DisplayName="Assign - fetch the day of start time" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_46">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[StartDay]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">[StartTime1.DayOfWeek.ToString]</InArgument>
                </Assign.Value>
              </Assign>
              <If Condition="[StartDay=&quot;Sunday&quot;]" DisplayName="If - Check if it's weekday or sunday" sap:VirtualizedContainerService.HintSize="1116.8,1105.6" sap2010:WorkflowViewState.IdRef="If_24">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <If.Then>
                  <Sequence DisplayName="If day is sunday" sap:VirtualizedContainerService.HintSize="304,152.8" sap2010:WorkflowViewState.IdRef="Sequence_99">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <Assign DisplayName="Assign start day to sunday" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_56">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[StartDay]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">Sunday</InArgument>
                      </Assign.Value>
                    </Assign>
                  </Sequence>
                </If.Then>
                <If.Else>
                  <Sequence DisplayName="If check if day is public holidayif its weekday" sap:VirtualizedContainerService.HintSize="768.8,946.4" sap2010:WorkflowViewState.IdRef="Sequence_100">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <ui:ForEachRow ColumnNames="{x:Null}" CurrentIndex="{x:Null}" DataTable="[in_PublicHolidaysDT]" DisplayName="For Each Row in Data Table" sap:VirtualizedContainerService.HintSize="727.2,720.8" sap2010:WorkflowViewState.IdRef="ForEachRow_4">
                      <ui:ForEachRow.Body>
                        <ActivityAction x:TypeArguments="sd:DataRow">
                          <ActivityAction.Argument>
                            <DelegateInArgument x:TypeArguments="sd:DataRow" Name="CurrentRow" />
                          </ActivityAction.Argument>
                          <Sequence DisplayName="for sundays dt" sap:VirtualizedContainerService.HintSize="693.6,604.8" sap2010:WorkflowViewState.IdRef="Sequence_96">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <Assign DisplayName="Assign" sap:VirtualizedContainerService.HintSize="652,60" sap2010:WorkflowViewState.IdRef="Assign_47">
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:String">[PHDate]</OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:String">[CurrentRow("Date").ToString]</InArgument>
                              </Assign.Value>
                            </Assign>
                            <Assign sap:VirtualizedContainerService.HintSize="652,60" sap2010:WorkflowViewState.IdRef="Assign_49">
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:String">[PHDate]</OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:String">[PHStartDateTime.ToShortDateString]</InArgument>
                              </Assign.Value>
                            </Assign>
                            <If Condition="[StartDate1= PHDate]" sap:VirtualizedContainerService.HintSize="652,312" sap2010:WorkflowViewState.IdRef="If_23">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <If.Then>
                                <Sequence DisplayName="Public Holiday" sap:VirtualizedContainerService.HintSize="304,152.8" sap2010:WorkflowViewState.IdRef="Sequence_97">
                                  <Sequence.Variables>
                                    <Variable x:TypeArguments="x:String" Name="Day" />
                                  </Sequence.Variables>
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <Assign DisplayName="Assign day to public holiday" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_54">
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="x:String">[StartDay]</OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="x:String">Public Holiday</InArgument>
                                    </Assign.Value>
                                  </Assign>
                                </Sequence>
                              </If.Then>
                              <If.Else>
                                <Sequence DisplayName="Weekday" sap:VirtualizedContainerService.HintSize="304,152.8" sap2010:WorkflowViewState.IdRef="Sequence_98">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <Assign DisplayName="Assign day to weekday" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_55">
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="x:String">[StartDay]</OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="x:String">Weekday</InArgument>
                                    </Assign.Value>
                                  </Assign>
                                </Sequence>
                              </If.Else>
                            </If>
                          </Sequence>
                        </ActivityAction>
                      </ui:ForEachRow.Body>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </ui:ForEachRow>
                    <ui:LogMessage DisplayName="Log Message - Display weekday" sap:VirtualizedContainerService.HintSize="727.2,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_57" Level="Info" Message="[&quot;The day is: &quot; + StartDay]" />
                  </Sequence>
                </If.Else>
              </If>
            </Sequence>
            <Sequence DisplayName="Check if the end day is weekday or PH" sap:VirtualizedContainerService.HintSize="1010.4,68.8" sap2010:WorkflowViewState.IdRef="Sequence_115">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <Assign DisplayName="Assign - fetch the day of start time" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_69">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[EndDay]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">[EndTime1.DayOfWeek.ToString]</InArgument>
                </Assign.Value>
              </Assign>
              <If Condition="[EndDay=&quot;Sunday&quot;]" DisplayName="If - Check if it's weekday or sunday" sap:VirtualizedContainerService.HintSize="548,312" sap2010:WorkflowViewState.IdRef="If_26">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <If.Then>
                  <Sequence DisplayName="If day is sunday" sap:VirtualizedContainerService.HintSize="304,152.8" sap2010:WorkflowViewState.IdRef="Sequence_110">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <Assign DisplayName="Assign End day to sunday" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_70">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[EndDay]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">Sunday</InArgument>
                      </Assign.Value>
                    </Assign>
                  </Sequence>
                </If.Then>
                <If.Else>
                  <Sequence DisplayName="If check if day is public holidayif its weekday" sap:VirtualizedContainerService.HintSize="200,68.8" sap2010:WorkflowViewState.IdRef="Sequence_114">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <ui:ForEachRow ColumnNames="{x:Null}" CurrentIndex="{x:Null}" DataTable="[in_PublicHolidaysDT]" DisplayName="For Each Row in Data Table" sap:VirtualizedContainerService.HintSize="433.6,461.6" sap2010:WorkflowViewState.IdRef="ForEachRow_5">
                      <ui:ForEachRow.Body>
                        <ActivityAction x:TypeArguments="sd:DataRow">
                          <ActivityAction.Argument>
                            <DelegateInArgument x:TypeArguments="sd:DataRow" Name="CurrentRow" />
                          </ActivityAction.Argument>
                          <Sequence DisplayName="for sundays dt" sap:VirtualizedContainerService.HintSize="304,345.6" sap2010:WorkflowViewState.IdRef="Sequence_113">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <Assign DisplayName="Assign" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_71">
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:String">[PHDate]</OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:String">[CurrentRow("Date").ToString]</InArgument>
                              </Assign.Value>
                            </Assign>
                            <Assign sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_72">
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:String">[PHDate]</OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:String">[PHStartDateTime.ToShortDateString]</InArgument>
                              </Assign.Value>
                            </Assign>
                            <If Condition="[StartDate2= PHDate]" sap:VirtualizedContainerService.HintSize="262.4,52.8" sap2010:WorkflowViewState.IdRef="If_25">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <If.Then>
                                <Sequence DisplayName="Public Holiday" sap:VirtualizedContainerService.HintSize="304,152.8" sap2010:WorkflowViewState.IdRef="Sequence_111">
                                  <Sequence.Variables>
                                    <Variable x:TypeArguments="x:String" Name="Day" />
                                  </Sequence.Variables>
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <Assign DisplayName="Assign day to public holiday" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_73">
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="x:String">[EndDay]</OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="x:String">Public Holiday</InArgument>
                                    </Assign.Value>
                                  </Assign>
                                </Sequence>
                              </If.Then>
                              <If.Else>
                                <Sequence DisplayName="Weekday" sap:VirtualizedContainerService.HintSize="304,152.8" sap2010:WorkflowViewState.IdRef="Sequence_112">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <Assign DisplayName="Assign day to weekday" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_74">
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="x:String">[EndDay]</OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="x:String">Weekday</InArgument>
                                    </Assign.Value>
                                  </Assign>
                                </Sequence>
                              </If.Else>
                            </If>
                          </Sequence>
                        </ActivityAction>
                      </ui:ForEachRow.Body>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </ui:ForEachRow>
                    <ui:LogMessage DisplayName="Log Message - Display weekday" sap:VirtualizedContainerService.HintSize="333.6,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_59" Level="Info" Message="[&quot;The end day is: &quot; + EndDay]" />
                  </Sequence>
                </If.Else>
              </If>
            </Sequence>
            <ui:ReadRange AddHeaders="True" DataTable="[QuotationDT]" DisplayName="Read Range Workbook - Quotation File" sap:VirtualizedContainerService.HintSize="1010.4,88" sap2010:WorkflowViewState.IdRef="ReadRange_1" SheetName="[in_Config1(&quot;QuotationFileSheetMonthly&quot;).ToString]" WorkbookPath="[in_QuotationFilePath1]">
              <ui:ReadRange.Range>
                <InArgument x:TypeArguments="x:String">
                  <Literal x:TypeArguments="x:String" Value="" />
                </InArgument>
              </ui:ReadRange.Range>
            </ui:ReadRange>
            <Sequence DisplayName="Fetch STD OT time" sap:VirtualizedContainerService.HintSize="1010.4,1120.8" sap2010:WorkflowViewState.IdRef="Sequence_105">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ui:LogMessage DisplayName="Log Message - Fetching Std ot time" sap:VirtualizedContainerService.HintSize="333.6,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_70" Level="Info" Message="[&quot;Fetching Std OT Time...&quot;]" />
              <ui:LookupDataTable LookupColumnIndex="{x:Null}" LookupDataColumn="{x:Null}" RowIndex="{x:Null}" TargetColumnIndex="{x:Null}" TargetDataColumn="{x:Null}" DataTable="[QuotationDT]" DisplayName="Lookup Data Table" sap:VirtualizedContainerService.HintSize="333.6,295.2" sap2010:WorkflowViewState.IdRef="LookupDataTable_6" LookupColumnName="Column2" LookupValue="Mon - Sat" TargetColumnName="Column7">
                <ui:LookupDataTable.CellValue>
                  <OutArgument x:TypeArguments="x:String">[StandardOTTime]</OutArgument>
                </ui:LookupDataTable.CellValue>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </ui:LookupDataTable>
              <Assign DisplayName="Assign Standard OT time in hours" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_41">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[StdOTTimeStartStr]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">[(StandardOTTime.Trim.Split("-"c)(0).Trim).Insert(2,":")]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign DisplayName="Assign StdOTTimeEndStr" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_40">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[StdOTTimeEndStr]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">[StandardOTTime.Trim.Split("-"c)(1).Trim.Insert(2,":")]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign DisplayName="Assign Standard OT time in hours" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_57">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[StdOTTimeStartStr]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">[StartDate1+" "+ StdOTTimeStartStr]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign DisplayName="Assign StdOTTimeEndStr" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_58">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[StdOTTimeEndStr]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String" xml:space="preserve">[StartDate1+" "+  StdOTTimeEndStr]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign DisplayName="Assign StdOTStartDateTime" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_60">
                <Assign.To>
                  <OutArgument x:TypeArguments="s:DateTime">[StdOTStartDateTime]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="s:DateTime">[CDate( StdOTTimeStartStr)]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign DisplayName="Assign StdOTEndDateTime" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_61">
                <Assign.To>
                  <OutArgument x:TypeArguments="s:DateTime">[StdOTEndDateTime]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="s:DateTime">[CDate( StdOTTimeEndStr)]</InArgument>
                </Assign.Value>
              </Assign>
            </Sequence>
            <Sequence DisplayName="Fetch Prem OT time" sap:VirtualizedContainerService.HintSize="1010.4,68.8" sap2010:WorkflowViewState.IdRef="Sequence_106">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ui:LogMessage DisplayName="Log Message - fetching prem OT time" sap:VirtualizedContainerService.HintSize="333.6,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_71" Level="Info" Message="[&quot;Fetching premium OT Time...&quot;]" />
              <ui:LookupDataTable LookupColumnIndex="{x:Null}" LookupDataColumn="{x:Null}" RowIndex="{x:Null}" TargetColumnIndex="{x:Null}" TargetDataColumn="{x:Null}" DataTable="[QuotationDT]" DisplayName="Lookup Data Table - PRem OT" sap:VirtualizedContainerService.HintSize="333.6,295.2" sap2010:WorkflowViewState.IdRef="LookupDataTable_7" LookupColumnName="Column2" LookupValue="Mon - Sat" TargetColumnName="Column14">
                <ui:LookupDataTable.CellValue>
                  <OutArgument x:TypeArguments="x:String">[PremiumOTTime]</OutArgument>
                </ui:LookupDataTable.CellValue>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </ui:LookupDataTable>
              <Assign DisplayName="Assign Prem OT time in hours" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_62">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[PremOTTimeStartStr]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">[( PremiumOTTime.Trim.Split("-"c)(0).Trim).Insert(2,":")]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign DisplayName="Assign Premium OT Time End Str" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_63">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[PremOTTimeEndStr]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">[PremiumOTTime.Trim.Split("-"c)(1).Trim.Insert(2,":")]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign DisplayName="Assign Standard OT time in hours" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_64">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[PremOTTimeStartStr]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">[StartDate1+" "+ PremOTTimeStartStr]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign DisplayName="Assign PremOTTimeEndStr" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_66">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[PremOTTimeEndStr]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">[(CDate(StartDate1).AddDays(1).ToString("dd/MM/yyyy"))+" "+ PremOTTimeEndStr]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign DisplayName="Assign PremOTStartDateTime" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_67">
                <Assign.To>
                  <OutArgument x:TypeArguments="s:DateTime">[PremOTStartDateTime]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="s:DateTime">[CDate( PremOTTimeStartStr)]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign DisplayName="Assign PremOTEndDateTime" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_68">
                <Assign.To>
                  <OutArgument x:TypeArguments="s:DateTime">[PremOTEndDateTime]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="s:DateTime">[DateTime.ParseExact(PremOTTimeEndStr, "dd/MM/yyyy HH:mm",System.Globalization.CultureInfo.InvariantCulture)]</InArgument>
                </Assign.Value>
              </Assign>
            </Sequence>
            <If Condition="[((EndTime1= StartTime2) and (( StartTime2.ToString.Split(&quot; &quot;c)(1)=&quot;12:00:00&quot;) or ( StartTime2.ToString.Split(&quot; &quot;c)(1)=&quot;13:00:00&quot;)))]" DisplayName="If start time and end times are same deduct 1 hour" sap:VirtualizedContainerService.HintSize="1010.4,733.6" sap2010:WorkflowViewState.IdRef="If_3">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If.Then>
                <If Condition="[not SignaurePresent]" sap:VirtualizedContainerService.HintSize="483.2,574.4" sap2010:WorkflowViewState.IdRef="If_2">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <If.Then>
                    <Sequence DisplayName="Deduct hrs" sap:VirtualizedContainerService.HintSize="375.2,385.6" sap2010:WorkflowViewState.IdRef="Sequence_30">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <ui:LogMessage DisplayName="Log Message - DEduct 1 hour" sap:VirtualizedContainerService.HintSize="333.6,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_69" Level="Info" Message="[&quot;Deducting 1 hour as time lies between lunch time...&quot;]" />
                      <Assign DisplayName="Assign deduct 1 hour" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_12">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:Int32">[TimeDiffHours2]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:Int32">[TimeDiffHours2-1]</InArgument>
                        </Assign.Value>
                      </Assign>
                      <Assign DisplayName="Assign Start time after lunch hours" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_36">
                        <Assign.To>
                          <OutArgument x:TypeArguments="s:DateTime">[StartTime2]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="s:DateTime">[StartTime2.AddHours(1)]</InArgument>
                        </Assign.Value>
                      </Assign>
                    </Sequence>
                  </If.Then>
                  <If.Else>
                    <Sequence sap2010:WorkflowViewState.IdRef="Sequence_31">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </Sequence>
                  </If.Else>
                </If>
              </If.Then>
              <If.Else>
                <If Condition="[((StartTime1.ToString.Split(&quot; &quot;c)(1)&lt;&quot;12:00:00&quot;) and ( EndTime1.ToString.Split(&quot; &quot;c)(1)&gt;&quot;13:00:00&quot;))]" sap:VirtualizedContainerService.HintSize="483.2,574.4" sap2010:WorkflowViewState.IdRef="If_35">
                  <If.Then>
                    <Sequence DisplayName="Deduct hrs" sap:VirtualizedContainerService.HintSize="375.2,385.6" sap2010:WorkflowViewState.IdRef="Sequence_149">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <ui:LogMessage DisplayName="Log Message - DEduct 1 hour" sap:VirtualizedContainerService.HintSize="333.6,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_78" Level="Info" Message="[&quot;Deducting 1 hour as time lies between lunch time...&quot;]" />
                      <Assign DisplayName="Assign deduct 1 hour" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_119">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:Int32">[TimeDiffHours1]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:Int32">[TimeDiffHours1-1]</InArgument>
                        </Assign.Value>
                      </Assign>
                      <Assign DisplayName="Assign Start time after lunch hours" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_120">
                        <Assign.To>
                          <OutArgument x:TypeArguments="s:DateTime">[EndTime1]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="s:DateTime">[EndTime1.AddHours(-1)]</InArgument>
                        </Assign.Value>
                      </Assign>
                    </Sequence>
                  </If.Then>
                  <If.Else>
                    <Sequence sap2010:WorkflowViewState.IdRef="Sequence_148">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </Sequence>
                  </If.Else>
                </If>
              </If.Else>
            </If>
            <Sequence DisplayName="Check if Customer has worked on weekends or public holidays" sap:VirtualizedContainerService.HintSize="1010.4,2699.2" sap2010:WorkflowViewState.IdRef="Sequence_51">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If Condition="[TimeDiffHours1&gt;0]" DisplayName="If - Calculation for Start time 1 and End time 1 if they are available" sap:VirtualizedContainerService.HintSize="723.2,682.4" sap2010:WorkflowViewState.IdRef="If_18">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <If.Then>
                  <Sequence DisplayName="Calculations" sap:VirtualizedContainerService.HintSize="375.2,523.2" sap2010:WorkflowViewState.IdRef="Sequence_108">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <ui:InvokeCode ContinueOnError="{x:Null}" Code="Dim NDStartTime As Date=CDate(DateAdd(&quot;d&quot;,1,CStr(in_StdOTTimeStart)))&#xA;Dim NDEndTime As Date=CDate(DateAdd(&quot;d&quot;,1,CStr(in_StdOTTimeEnd)))&#xA;&#xA;If in_StartTime&gt;= in_StdOTTimeStart And in_EndTime&lt;= in_StdOTTimeEnd Then&#xA;   &#x9; If in_StartDay=&quot;Weekday&quot;&#xA;&#x9;&#x9;out_StandardHoursWorked= DateDiff(&quot;n&quot;,CStr(in_StartTime) , CStr(in_EndTime))/60&#xA;&#x9; Else&#xA;&#x9;&#x9;out_PremHoursWorked= DateDiff(&quot;n&quot;,CStr(in_StartTime) , CStr(in_EndTime))/60&#xA;&#x9; End If&#xA;&#x9;&#xA;ElseIf in_StartTime&gt;= in_StdOTTimeEnd  And in_EndTime&lt; NDStartTime Then&#xA;&#xA;    out_PremHoursWorked= DateDiff(&quot;n&quot;,CStr(in_StartTime) , CStr(in_EndTime))/60&#xA;&#x9;&#xA;ElseIf in_StartTime&gt;= in_StdOTTimeStart  And in_EndTime&gt; in_StdOTTimeEnd And in_EndTime&lt; NDStartTime Then&#xA;    If in_StartDay=&quot;Weekday&quot;&#xA;   &#x9;&#x9; out_PremHoursWorked= DateDiff(&quot;n&quot;,CStr(in_StdOTTimeEnd) , CStr(in_EndTime))/60&#xA;   &#x9;&#x9; out_StandardHoursWorked= DateDiff(&quot;n&quot;,CStr(in_StartTime) , CStr(in_StdOTTimeEnd))/60&#xA;&#x9;Else&#xA;&#x9;&#x9; out_PremHoursWorked= (DateDiff(&quot;n&quot;,CStr(in_StdOTTimeEnd) , CStr(in_EndTime))/60)+(DateDiff(&quot;n&quot;,CStr(in_StartTime) , CStr(in_StdOTTimeEnd))/60)&#xA;&#x9; End If&#xA;&#x9;&#xA;ElseIf in_StartTime&lt; in_StdOTTimeStart  And in_EndTime&lt; in_StdOTTimeStart&#xA;&#x9; &#xA;&#x9;&#x9;out_PremHoursWorked= DateDiff(&quot;n&quot;,CStr(in_StartTime) , CStr(in_EndTime))/60&#xA;&#xA;ElseIf in_StartTime&lt; in_StdOTTimeStart  And in_EndTime&lt;= in_StdOTTimeEnd&#xA;&#x9;If in_StartDay=&quot;Weekday&quot;&#xA;&#x9;&#x9;out_PremHoursWorked= DateDiff(&quot;n&quot;,CStr(in_StartTime) , CStr(in_StdOTTimeStart))/60&#xA;    &#x9;out_StandardHoursWorked= DateDiff(&quot;n&quot;,CStr(in_StdOTTimeStart) , CStr(in_EndTime))/60&#xA;&#x9;Else&#xA;&#x9;&#x9;out_PremHoursWorked= (DateDiff(&quot;n&quot;,CStr(in_StartTime) , CStr(in_StdOTTimeStart))/60)+(DateDiff(&quot;n&quot;,CStr(in_StdOTTimeStart) , CStr(in_EndTime))/60)&#xA;&#x9;End If&#xA;&#x9;&#x9;&#xA;&#xA;ElseIf in_StartTime&lt; in_StdOTTimeStart  And in_EndTime&gt; in_StdOTTimeEnd And in_EndTime&lt; NDStartTime&#xA;&#x9; &#xA;    If in_StartDay=&quot;Weekday&quot;&#xA;&#x9;&#x9;&#x9;out_PremHoursWorked= (DateDiff(&quot;n&quot;,CStr(in_StartTime) , CStr(in_StdOTTimeStart))/60)+(DateDiff(&quot;n&quot;,CStr(in_StdOTTimeEnd) , CStr(in_EndTime))/60)&#xA;    &#x9;&#x9;out_StandardHoursWorked= DateDiff(&quot;n&quot;,CStr(in_StdOTTimeStart) , CStr(in_StdOTTimeEnd))/60&#xA;&#x9;Else&#xA;&#x9;&#x9; &#x9;out_PremHoursWorked= (DateDiff(&quot;n&quot;,CStr(in_StartTime) , CStr(in_StdOTTimeStart))/60)+(DateDiff(&quot;n&quot;,CStr(in_StdOTTimeEnd) , CStr(in_EndTime))/60)+(DateDiff(&quot;n&quot;,CStr(in_StdOTTimeStart) , CStr(in_StdOTTimeEnd))/60)&#xA;&#x9;&#x9;End If&#xA;&#x9;&#xA;ElseIf in_StartTime&gt; in_StdOTTimeEnd  And in_EndTime&gt; NDStartTime And in_EndTime&lt;=NDEndTime &#xA;&#x9; &#xA;&#x9;If in_EndDay=&quot;Weekday&quot;&#xA;&#x9;&#x9;&#x9;out_PremHoursWorked= DateDiff(&quot;n&quot;,CStr(in_StartTime) , CStr(NDStartTime))/60&#xA;   &#x9;&#x9;    out_StandardHoursWorked= DateDiff(&quot;n&quot;,CStr(NDStartTime), CStr(in_EndTime))/60&#xA;&#x9;Else&#xA;&#x9;&#x9;&#x9;out_PremHoursWorked= (DateDiff(&quot;n&quot;,CStr(in_StartTime) , CStr(NDStartTime))/60)+(DateDiff(&quot;n&quot;,CStr(NDStartTime), CStr(in_EndTime))/60)&#xA;&#x9;End If&#xA;&#x9;&#xA; End If&#xA;&#xA;" DisplayName="Invoke code - for Start Time 1 and End time 1" sap:VirtualizedContainerService.HintSize="333.6,164.8" sap2010:WorkflowViewState.IdRef="InvokeCode_1">
                      <ui:InvokeCode.Arguments>
                        <InArgument x:TypeArguments="s:DateTime" x:Key="in_StdOTTimeStart">[StdOTStartDateTime]</InArgument>
                        <InArgument x:TypeArguments="s:DateTime" x:Key="in_StdOTTimeEnd">[StdOTEndDateTime]</InArgument>
                        <InArgument x:TypeArguments="s:DateTime" x:Key="in_StartTime">[StartTime1]</InArgument>
                        <InArgument x:TypeArguments="s:DateTime" x:Key="in_EndTime">[EndTime1]</InArgument>
                        <OutArgument x:TypeArguments="x:Double" x:Key="out_StandardHoursWorked">[StdWorkingHours1]</OutArgument>
                        <InArgument x:TypeArguments="s:DateTime" x:Key="in_PremOTTimeStart">[PremOTStartDateTime]</InArgument>
                        <InArgument x:TypeArguments="s:DateTime" x:Key="in_PremOTTimeEnd">[PremOTEndDateTime]</InArgument>
                        <OutArgument x:TypeArguments="x:Double" x:Key="out_PremHoursWorked">[PremWorkingHours1]</OutArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="in_StartDay">[StartDay]</InArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="in_EndDay">[EndDay]</InArgument>
                      </ui:InvokeCode.Arguments>
                    </ui:InvokeCode>
                    <ui:LogMessage DisplayName="Log Message - Display std working hours1" sap:VirtualizedContainerService.HintSize="333.6,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_60" Level="Info" Message="[&quot;Std. Working hours for Start Time 1 and End Time 1 are: &quot;+ StdWorkingHours1.ToString]" />
                    <ui:LogMessage DisplayName="Log Message - Display Prem working hours1" sap:VirtualizedContainerService.HintSize="333.6,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_61" Level="Info" Message="[&quot;Premium Working hours for Start Time 1 and End Time 1 are: &quot;+ PremWorkingHours1.ToString]" />
                  </Sequence>
                </If.Then>
                <If.Else>
                  <Sequence DisplayName="Set Std Working hours 1 and Prem 1 to 0" sap:VirtualizedContainerService.HintSize="304,252.8" sap2010:WorkflowViewState.IdRef="Sequence_135">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <Assign DisplayName="Assign Std working hours 1 to 0" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_92">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Double">[StdWorkingHours1]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:Double">0</InArgument>
                      </Assign.Value>
                    </Assign>
                    <Assign DisplayName="Assign Prem working hours 1 to 0" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_93">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Double">[PremWorkingHours1]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:Double">0</InArgument>
                      </Assign.Value>
                    </Assign>
                  </Sequence>
                </If.Else>
              </If>
              <If Condition="[TimeDiffHours2&gt;0]" DisplayName="If - Calculation for Start time 2 and End time 2 if they are available" sap:VirtualizedContainerService.HintSize="723.2,52.8" sap2010:WorkflowViewState.IdRef="If_30">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <If.Then>
                  <Sequence DisplayName="Calculations" sap:VirtualizedContainerService.HintSize="375.2,523.2" sap2010:WorkflowViewState.IdRef="Sequence_129">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <ui:InvokeCode ContinueOnError="{x:Null}" Code="Dim NDStartTime As Date=CDate(DateAdd(&quot;d&quot;,1,CStr(in_StdOTTimeStart)))&#xA;Dim NDEndTime As Date=CDate(DateAdd(&quot;d&quot;,1,CStr(in_StdOTTimeEnd)))&#xA;&#xA;If in_StartTime&gt;= in_StdOTTimeStart And in_EndTime&lt;= in_StdOTTimeEnd Then&#xA;   &#x9; If in_StartDay=&quot;Weekday&quot;&#xA;&#x9;&#x9;out_StandardHoursWorked= DateDiff(&quot;n&quot;,CStr(in_StartTime) , CStr(in_EndTime))/60&#xA;&#x9; Else&#xA;&#x9;&#x9;out_PremHoursWorked= DateDiff(&quot;n&quot;,CStr(in_StartTime) , CStr(in_EndTime))/60&#xA;&#x9; End If&#xA;&#x9;&#xA;ElseIf in_StartTime&gt;= in_StdOTTimeEnd  And in_EndTime&lt; NDStartTime Then&#xA;&#xA;    out_PremHoursWorked= DateDiff(&quot;n&quot;,CStr(in_StartTime) , CStr(in_EndTime))/60&#xA;&#x9;&#xA;ElseIf in_StartTime&gt;= in_StdOTTimeStart  And in_EndTime&gt; in_StdOTTimeEnd And in_EndTime&lt; NDStartTime Then&#xA;    If in_StartDay=&quot;Weekday&quot;&#xA;   &#x9;&#x9; out_PremHoursWorked= DateDiff(&quot;n&quot;,CStr(in_StdOTTimeEnd) , CStr(in_EndTime))/60&#xA;   &#x9;&#x9; out_StandardHoursWorked= DateDiff(&quot;n&quot;,CStr(in_StartTime) , CStr(in_StdOTTimeEnd))/60&#xA;&#x9;Else&#xA;&#x9;&#x9; out_PremHoursWorked= (DateDiff(&quot;n&quot;,CStr(in_StdOTTimeEnd) , CStr(in_EndTime))/60)+(DateDiff(&quot;n&quot;,CStr(in_StartTime) , CStr(in_StdOTTimeEnd))/60)&#xA;&#x9; End If&#xA;&#x9;&#xA;ElseIf in_StartTime&lt; in_StdOTTimeStart  And in_EndTime&lt; in_StdOTTimeStart&#xA;&#x9; &#xA;&#x9;&#x9;out_PremHoursWorked= DateDiff(&quot;n&quot;,CStr(in_StartTime) , CStr(in_EndTime))/60&#xA;&#xA;ElseIf in_StartTime&lt; in_StdOTTimeStart  And in_EndTime&lt;= in_StdOTTimeEnd&#xA;&#x9;If in_StartDay=&quot;Weekday&quot;&#xA;&#x9;&#x9;out_PremHoursWorked= DateDiff(&quot;n&quot;,CStr(in_StartTime) , CStr(in_StdOTTimeStart))/60&#xA;    &#x9;out_StandardHoursWorked= DateDiff(&quot;n&quot;,CStr(in_StdOTTimeStart) , CStr(in_EndTime))/60&#xA;&#x9;Else&#xA;&#x9;&#x9;out_PremHoursWorked= (DateDiff(&quot;n&quot;,CStr(in_StartTime) , CStr(in_StdOTTimeStart))/60)+(DateDiff(&quot;n&quot;,CStr(in_StdOTTimeStart) , CStr(in_EndTime))/60)&#xA;&#x9;End If&#xA;&#x9;&#x9;&#xA;&#xA;ElseIf in_StartTime&lt; in_StdOTTimeStart  And in_EndTime&gt; in_StdOTTimeEnd And in_EndTime&lt; NDStartTime&#xA;&#x9; &#xA;    If in_StartDay=&quot;Weekday&quot;&#xA;&#x9;&#x9;&#x9;out_PremHoursWorked= (DateDiff(&quot;n&quot;,CStr(in_StartTime) , CStr(in_StdOTTimeStart))/60)+(DateDiff(&quot;n&quot;,CStr(in_StdOTTimeEnd) , CStr(in_EndTime))/60)&#xA;    &#x9;&#x9;out_StandardHoursWorked= DateDiff(&quot;n&quot;,CStr(in_StdOTTimeStart) , CStr(in_StdOTTimeEnd))/60&#xA;&#x9;Else&#xA;&#x9;&#x9; &#x9;out_PremHoursWorked= (DateDiff(&quot;n&quot;,CStr(in_StartTime) , CStr(in_StdOTTimeStart))/60)+(DateDiff(&quot;n&quot;,CStr(in_StdOTTimeEnd) , CStr(in_EndTime))/60)+(DateDiff(&quot;n&quot;,CStr(in_StdOTTimeStart) , CStr(in_StdOTTimeEnd))/60)&#xA;&#x9;&#x9;End If&#xA;&#x9;&#xA;ElseIf in_StartTime&gt; in_StdOTTimeEnd  And in_EndTime&gt; NDStartTime And in_EndTime&lt;=NDEndTime &#xA;&#x9; &#xA;&#x9;If in_EndDay=&quot;Weekday&quot;&#xA;&#x9;&#x9;&#x9;out_PremHoursWorked= DateDiff(&quot;n&quot;,CStr(in_StartTime) , CStr(NDStartTime))/60&#xA;   &#x9;&#x9;    out_StandardHoursWorked= DateDiff(&quot;n&quot;,CStr(NDStartTime), CStr(in_EndTime))/60&#xA;&#x9;Else&#xA;&#x9;&#x9;&#x9;out_PremHoursWorked= (DateDiff(&quot;n&quot;,CStr(in_StartTime) , CStr(NDStartTime))/60)+(DateDiff(&quot;n&quot;,CStr(NDStartTime), CStr(in_EndTime))/60)&#xA;&#x9;End If&#xA;&#x9;&#xA; End If&#xA;&#xA;" DisplayName="Invoke code - for Start Time 2 and End time 2" sap:VirtualizedContainerService.HintSize="333.6,164.8" sap2010:WorkflowViewState.IdRef="InvokeCode_5">
                      <ui:InvokeCode.Arguments>
                        <InArgument x:TypeArguments="s:DateTime" x:Key="in_StdOTTimeStart">[StdOTStartDateTime]</InArgument>
                        <InArgument x:TypeArguments="s:DateTime" x:Key="in_StdOTTimeEnd">[StdOTEndDateTime]</InArgument>
                        <InArgument x:TypeArguments="s:DateTime" x:Key="in_StartTime">[StartTime2]</InArgument>
                        <InArgument x:TypeArguments="s:DateTime" x:Key="in_EndTime">[EndTime2]</InArgument>
                        <OutArgument x:TypeArguments="x:Double" x:Key="out_StandardHoursWorked">[StdWorkingHours2]</OutArgument>
                        <InArgument x:TypeArguments="s:DateTime" x:Key="in_PremOTTimeStart">[PremOTStartDateTime]</InArgument>
                        <InArgument x:TypeArguments="s:DateTime" x:Key="in_PremOTTimeEnd">[PremOTEndDateTime]</InArgument>
                        <OutArgument x:TypeArguments="x:Double" x:Key="out_PremHoursWorked">[PremWorkingHours2]</OutArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="in_StartDay">[StartDay]</InArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="in_EndDay">[EndDay]</InArgument>
                      </ui:InvokeCode.Arguments>
                    </ui:InvokeCode>
                    <ui:LogMessage DisplayName="Log Message - Display std working hours2" sap:VirtualizedContainerService.HintSize="333.6,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_62" Level="Info" Message="[&quot;Std. Working hours for Start Time 2 and End Time 2 are: &quot;+ StdWorkingHours2.ToString]" />
                    <ui:LogMessage DisplayName="Log Message - Display Prem working hours2" sap:VirtualizedContainerService.HintSize="333.6,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_63" Level="Info" Message="[&quot;Premium Working hours for Start Time 2 and End Time 2 are: &quot;+ PremWorkingHours2.ToString]" />
                  </Sequence>
                </If.Then>
                <If.Else>
                  <Sequence DisplayName="Set Std Working hours 2 and Prem 2 to 0" sap:VirtualizedContainerService.HintSize="304,252.8" sap2010:WorkflowViewState.IdRef="Sequence_130">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <Assign DisplayName="Assign Std working hours 2 to 0" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_90">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Double">[StdWorkingHours2]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:Double">0</InArgument>
                      </Assign.Value>
                    </Assign>
                    <Assign DisplayName="Assign Prem working hours 2 to 0" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_91">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Double">[PremWorkingHours2]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:Double">0</InArgument>
                      </Assign.Value>
                    </Assign>
                  </Sequence>
                </If.Else>
              </If>
              <If Condition="[(PremWorkingHours1+PremWorkingHours2+ StdWorkingHours1+ StdWorkingHours2)&gt; in_MinWorkingHrs]" DisplayName="If driver has worked more than his min working hrs" sap:VirtualizedContainerService.HintSize="723.2,444.8" sap2010:WorkflowViewState.IdRef="If_31">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <If.Then>
                  <Sequence DisplayName="Display OT hours" sap:VirtualizedContainerService.HintSize="375.2,285.6" sap2010:WorkflowViewState.IdRef="Sequence_145">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <Assign DisplayName="Assign OT hrs" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_106">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Double">[OTHoursForDay]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:Double">[(PremWorkingHours1+PremWorkingHours2+ StdWorkingHours1+ StdWorkingHours2)- in_MinWorkingHrs]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:LogMessage DisplayName="Log Message - OT Hours" sap:VirtualizedContainerService.HintSize="333.6,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_74" Level="Info" Message="[&quot;Overtime Hours for the day are: &quot;+ OTHoursForDay.ToString]" />
                  </Sequence>
                </If.Then>
                <If.Else>
                  <Sequence sap:VirtualizedContainerService.HintSize="304,152.8" sap2010:WorkflowViewState.IdRef="Sequence_143">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <Assign DisplayName="Assign OT hrs" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_114">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Double">[OTHoursForDay]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:Double">0</InArgument>
                      </Assign.Value>
                    </Assign>
                  </Sequence>
                </If.Else>
              </If>
              <Assign DisplayName="Assign std working hrs for the day" sap:VirtualizedContainerService.HintSize="723.2,60" sap2010:WorkflowViewState.IdRef="Assign_116">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Double">[StdWorkingHoursForDay]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Double">[StdWorkingHours1+StdWorkingHours2]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign DisplayName="Assign Prem Working hrs for the day" sap:VirtualizedContainerService.HintSize="723.2,60" sap2010:WorkflowViewState.IdRef="Assign_117">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Double">[PremWorkingHoursForDay]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Double">[PremWorkingHours1+PremWorkingHours2]</InArgument>
                </Assign.Value>
              </Assign>
              <If Condition="[OTHoursForDay&gt;0]" DisplayName="If OT hours present deduct those from std or prem hrs for the day" sap:VirtualizedContainerService.HintSize="723.2,408" sap2010:WorkflowViewState.IdRef="If_33">
                <If.Then>
                  <If Condition="[(StdWorkingHours1+ StdWorkingHours2)&gt; OTHoursForDay]" DisplayName="If he has worked in Std time" sap:VirtualizedContainerService.HintSize="568.8,219.2" sap2010:WorkflowViewState.IdRef="If_34">
                    <If.Then>
                      <Assign DisplayName="Assign - minus OT time from STd working hrs for the day" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_115">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:Double">[StdWorkingHoursForDay]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:Double">[StdWorkingHoursForDay- OTHoursForDay]</InArgument>
                        </Assign.Value>
                      </Assign>
                    </If.Then>
                    <If.Else>
                      <Assign DisplayName="Assign - minus OT time from Prem working hrs for the day" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_118">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:Double">[PremWorkingHoursForDay]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:Double">[PremWorkingHoursForDay - OTHoursForDay]</InArgument>
                        </Assign.Value>
                      </Assign>
                    </If.Else>
                  </If>
                </If.Then>
                <If.Else>
                  <Sequence sap2010:WorkflowViewState.IdRef="Sequence_146">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </Sequence>
                </If.Else>
              </If>
              <Assign DisplayName="Assign Total std working hours" sap:VirtualizedContainerService.HintSize="723.2,60" sap2010:WorkflowViewState.IdRef="Assign_94">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Double">[out_TotalStdWorkingHours]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Double">[out_TotalStdWorkingHours+ StdWorkingHoursForDay]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign DisplayName="Assign Total Prem Working Hours " sap:VirtualizedContainerService.HintSize="723.2,60" sap2010:WorkflowViewState.IdRef="Assign_95">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Double">[out_TotalPremWorkingHours]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Double">[out_TotalPremWorkingHours+ PremWorkingHoursForDay]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign DisplayName="Assign Total OT hrs" sap:VirtualizedContainerService.HintSize="723.2,60" sap2010:WorkflowViewState.IdRef="Assign_111">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Double">[out_TotalOTHours]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Double">[out_TotalOTHours+OTHoursForDay]</InArgument>
                </Assign.Value>
              </Assign>
              <ui:LogMessage DisplayName="Log Message - Display total std working hours" sap:VirtualizedContainerService.HintSize="723.2,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_76" Level="Info" Message="[&quot;Total Monthly Working Hours for the period are: &quot;+ out_TotalStdWorkingHours.ToString]" />
              <ui:LogMessage DisplayName="Log Message - Display total Prem working hours" sap:VirtualizedContainerService.HintSize="723.2,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_77" Level="Info" Message="[&quot;Total Premium Working Hours for the period are: &quot;+ out_TotalPremWorkingHours.ToString]" />
              <ui:LogMessage DisplayName="Log Message- Display Total OT hours" sap:VirtualizedContainerService.HintSize="723.2,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_75" Level="Info" Message="[&quot;Total Overtime Hours for the period are: &quot;+ out_TotalOTHours.ToString]" />
            </Sequence>
          </Sequence>
        </ActivityAction>
      </ui:ForEachRow.Body>
    </ui:ForEachRow>
  </Sequence>
</Activity>